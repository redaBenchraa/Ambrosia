<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>LongParameterList:Bill.kt$Bill$( @Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(nullable = false) @field:NotNull(message = "error.bill.id.null") var id: Long?, @Column(nullable = false) @CreatedDate @ColumnDefault(NOW) var createdAt: LocalDateTime = LocalDateTime.now(), @Column(nullable = false) @LastModifiedDate @ColumnDefault(NOW) var updatedAt: LocalDateTime = LocalDateTime.now(), @Column(columnDefinition = "boolean default 0") var deleted: Boolean = false, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "customer_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var customer: Customer?, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "employee_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var employee: Employee?, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "session_id", nullable = false) @OnDelete(action = OnDeleteAction.NO_ACTION) @JsonManagedReference var session: Session, )</ID>
    <ID>LongParameterList:Business.kt$Business$( @Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(nullable = false) @field:NotNull(message = "error.business.id.null") var id: Long?, @field:NotNull(message = "error.business.name.null") @field:NotBlank(message = "error.business.name.blank") @field:Size(max = NAME_MAX_SIZE, message = "error.business.name.size.invalid") @Column(nullable = false) var name: String, @field:NotNull @field:NotBlank(message = "error.business.phoneNumber.blank") @Column(nullable = false) var phoneNumber: String, @Column(nullable = false) @field:NotBlank(message = "error.business.email.blank") @field:Email(message = "error.business.email.format.invalid") @field:Size(max = EMAIL_MAX_SIZE, message = "error.business.email.size.invalid") var email: String, @Column(columnDefinition = "text") var description: String? = null, var slogan: String? = null, var logo: String? = null, var location: String? = null, @Column(nullable = false) var currency: String = Currency.EUR.name, @Column(nullable = false) @ColumnDefault("true") var isAvailable: Boolean = true, @Column(nullable = false) @CreatedDate @ColumnDefault(NOW) var createdAt: LocalDateTime = LocalDateTime.now(), @Column(nullable = false) @LastModifiedDate @ColumnDefault(NOW) var updatedAt: LocalDateTime = LocalDateTime.now(), @Column(columnDefinition = "boolean default 0") var deleted: Boolean = false, @OneToMany( cascade = [CascadeType.ALL], fetch = FetchType.LAZY, mappedBy = "business", targetEntity = Category::class ) @JsonBackReference var categories: MutableSet&lt;Category&gt; = HashSet(), @OneToMany( cascade = [CascadeType.ALL], fetch = FetchType.LAZY, mappedBy = "business", targetEntity = Employee::class ) @JsonBackReference var employees: MutableSet&lt;Employee&gt; = HashSet(), @OneToMany( cascade = [CascadeType.ALL], fetch = FetchType.LAZY, mappedBy = "business", targetEntity = Table::class ) @JsonBackReference var tables: MutableSet&lt;Table&gt; = HashSet(), @OneToMany( cascade = [CascadeType.ALL], fetch = FetchType.LAZY, mappedBy = "business", targetEntity = Item::class ) @JsonBackReference var items: MutableSet&lt;Item&gt; = HashSet(), @OneToMany( cascade = [CascadeType.ALL], fetch = FetchType.LAZY, mappedBy = "business", targetEntity = Menu::class ) @JsonBackReference var menus: MutableSet&lt;Menu&gt; = HashSet(), @OneToMany( cascade = [CascadeType.ALL], fetch = FetchType.LAZY, mappedBy = "business", targetEntity = Session::class ) @JsonBackReference var sessions: MutableSet&lt;Session&gt; = HashSet(), )</ID>
    <ID>LongParameterList:Category.kt$Category$( @Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(nullable = false) var id: Long? = null, @Column(nullable = false) var name: String, @Column(columnDefinition = "text") var description: String? = null, var image: String? = null, @Column(columnDefinition = "boolean default 0") var deleted: Boolean = false, @Column(nullable = false) @CreatedDate @ColumnDefault(Constants.NOW) var createdAt: LocalDateTime = LocalDateTime.now(), @Column(nullable = false) @LastModifiedDate @ColumnDefault(Constants.NOW) var updatedAt: LocalDateTime = LocalDateTime.now(), @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "business_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var business: Business? = null, )</ID>
    <ID>LongParameterList:Customer.kt$Customer$( @Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(nullable = false) @field:NotNull(message = "error.customer.id.null") var id: Long?, var firstName: String, var lastName: String, var age: String, @Column(nullable = false) @CreatedDate @ColumnDefault(Constants.NOW) var createdAt: LocalDateTime = LocalDateTime.now(), @Column(nullable = false) @LastModifiedDate @ColumnDefault(Constants.NOW) var updatedAt: LocalDateTime = LocalDateTime.now(), @Column(columnDefinition = "boolean default 0") var deleted: Boolean = false, @OneToMany( cascade = [CascadeType.ALL], fetch = FetchType.LAZY, mappedBy = "customer", targetEntity = Order::class ) @JsonBackReference var orders: MutableSet&lt;Order&gt;, @OneToMany( cascade = [CascadeType.ALL], fetch = FetchType.LAZY, mappedBy = "customer", targetEntity = Bill::class ) @JsonBackReference var bills: MutableSet&lt;Bill&gt;, )</ID>
    <ID>LongParameterList:Employee.kt$Employee$( @Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(nullable = false) @field:NotNull(message = "error.employee.id.null") var id: Long? = null, @field:NotNull(message = "error.employee.firstName.null") @field:NotBlank(message = "error.employee.firstName.blank") @field:Size(max = NAME_MAX_SIZE, message = "error.employee.firstName.size.invalid") var firstName: String, @field:NotNull(message = "error.employee.lastName.null") @field:NotBlank(message = "error.employee.lastName.blank") @field:Size(max = NAME_MAX_SIZE, message = "error.employee.lastName.size.invalid") var lastName: String, @field:NotNull(message = "error.employee.email.null") @field:NotBlank(message = "error.employee.email.blank") @field:Size(max = EMAIL_MAX_SIZE, message = "error.employee.email.size.invalid") var email: String, @Column(nullable = false) @field:NotNull(message = "error.employee.position.null") var position: Role = Role.MANAGER, @Column(nullable = false) @CreatedDate @ColumnDefault(NOW) var createdAt: LocalDateTime = LocalDateTime.now(), @Column(nullable = false) @LastModifiedDate @ColumnDefault(NOW) var updatedAt: LocalDateTime = LocalDateTime.now(), @Column(columnDefinition = "boolean default 0") var deleted: Boolean = false, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "business_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var business: Business? = null, )</ID>
    <ID>LongParameterList:Item.kt$Item$( @Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(nullable = false) @field:NotNull(message = "error.item.id.null") var id: Long? = null, @field:NotNull(message = "error.item.name.null") @field:NotBlank(message = "error.item.name.blank") @field:Size(max = NAME_MAX_SIZE, message = "error.item.name.size.invalid") @Column(nullable = false) var name: String, @Column(columnDefinition = "text") var description: String? = null, var image: String? = null, @field:NotNull(message = "error.item.price.null") @field:Min(0, message = "error.item.price.negative") var price: Double, @Column(nullable = false) @ColumnDefault("false") var onlyForMenu: Boolean = false, @Column(nullable = false) @CreatedDate @ColumnDefault(Constants.NOW) var createdAt: LocalDateTime = LocalDateTime.now(), @Column(nullable = false) @LastModifiedDate @ColumnDefault(Constants.NOW) var updatedAt: LocalDateTime = LocalDateTime.now(), @Column(columnDefinition = "boolean default 0") var deleted: Boolean = false, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "business_id", nullable = true) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var business: Business? = null, )</ID>
    <ID>LongParameterList:Menu.kt$Menu$( @Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(nullable = false) @field:NotNull(message = "error.menu.id.null") var id: Long? = null, @field:NotNull(message = "error.menu.name.null") @field:NotBlank(message = "error.menu.name.blank") @field:Size(max = NAME_MAX_SIZE, message = "error.menu.name.size.invalid") @Column(nullable = false) var name: String, @Column(columnDefinition = "text") var description: String? = null, var image: String? = null, @field:NotNull(message = "error.menu.price.null") @field:Min(PRICE_MIN, message = "error.menu.price.negative") var price: Double = PRICE_MIN.toDouble(), @Column(nullable = false) @CreatedDate @ColumnDefault(NOW) var createdAt: LocalDateTime = LocalDateTime.now(), @Column(nullable = false) @LastModifiedDate @ColumnDefault(NOW) var updatedAt: LocalDateTime = LocalDateTime.now(), @Column(columnDefinition = "boolean default 0") var deleted: Boolean = false, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "business_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var business: Business? = null, @OneToMany( cascade = [CascadeType.ALL], fetch = FetchType.LAZY, mappedBy = "menu", targetEntity = MenuItem::class ) @JsonBackReference var menuItems: MutableSet&lt;MenuItem&gt; = HashSet(), )</ID>
    <ID>LongParameterList:MenuItem.kt$MenuItem$( @Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(nullable = false) @field:NotNull(message = "error.menuItem.id.null") var id: Long? = null, @field:NotNull(message = "error.menuItem.extra.null") @field:Min(EXTRA_MIN, message = "error.menuItem.price.negative") var extra: Double = EXTRA_MIN.toDouble(), @Column(nullable = false) @CreatedDate @ColumnDefault(Constants.NOW) var createdAt: LocalDateTime = LocalDateTime.now(), @Column(nullable = false) @LastModifiedDate @ColumnDefault(Constants.NOW) var updatedAt: LocalDateTime = LocalDateTime.now(), @Column(columnDefinition = "boolean default 0") var deleted: Boolean = false, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "menu_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var menu: Menu? = null, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "category_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var category: Category? = null, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "item_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var item: Item? = null, )</ID>
    <ID>LongParameterList:Order.kt$Order$( @Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(nullable = false) @field:NotNull(message = "error.order.id.null") var id: Long? = null, @Column(nullable = false) @CreatedDate @ColumnDefault(NOW) var createdAt: LocalDateTime = LocalDateTime.now(), @Column(nullable = false) @LastModifiedDate @ColumnDefault(NOW) var updatedAt: LocalDateTime = LocalDateTime.now(), @Column(columnDefinition = "boolean default 0") var deleted: Boolean = false, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "session_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var session: Session, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "customer_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var customer: Customer? = null, @OneToMany( cascade = [CascadeType.ALL], fetch = FetchType.LAZY, mappedBy = "order", targetEntity = OrderedItem::class ) @JsonBackReference var orderedItem: MutableSet&lt;OrderedItem&gt; = HashSet(), )</ID>
    <ID>LongParameterList:OrderedItem.kt$OrderedItem$( @Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(nullable = false) @field:NotNull(message = "error.orderedItem.id.null") var id: Long?, @field:NotNull(message = "error.orderedItem.name.null") @field:NotBlank(message = "error.orderedItem.name.blank") @field:Size(max = NAME_MAX_SIZE, message = "error.orderedItem.name.size.invalid") @Column(nullable = false) var name: String, @Column(columnDefinition = "text") var description: String?, @field:NotNull(message = "error.orderedItem.price.null") @field:Min(0, message = "error.orderedItem.price.negative") var price: Double, @Column(nullable = false) @CreatedDate @ColumnDefault(Constants.NOW) var createdAt: LocalDateTime = LocalDateTime.now(), @Column(nullable = false) @LastModifiedDate @ColumnDefault(Constants.NOW) var updatedAt: LocalDateTime = LocalDateTime.now(), @Column(columnDefinition = "boolean default 0") var deleted: Boolean = false, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "order_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var order: Order? = null, @OneToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "item_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var item: Item?, )</ID>
    <ID>LongParameterList:Session.kt$Session$( @Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(nullable = false) @field:NotNull(message = "error.session.id.null") var id: Long? = null, @Column(nullable = false) @field:NotNull(message = "error.session.isPaid.null") var isPaid: Boolean = false, @Column(nullable = false) @field:NotNull(message = "error.session.isApproved.null") var isApproved: Boolean = true, @Column(nullable = false) @CreatedDate @ColumnDefault(NOW) var createdAt: LocalDateTime = LocalDateTime.now(), @Column(nullable = false) @LastModifiedDate @ColumnDefault(NOW) var updatedAt: LocalDateTime = LocalDateTime.now(), @Column(columnDefinition = "boolean default 0") var deleted: Boolean = false, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "business_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var business: Business? = null, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "employee_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var employee: Employee? = null, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "table_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var table: Table? = null, @OneToMany( cascade = [CascadeType.ALL], fetch = FetchType.LAZY, mappedBy = "session", targetEntity = Order::class ) @JsonBackReference var orders: MutableSet&lt;Order&gt;, @OneToMany( cascade = [CascadeType.ALL], fetch = FetchType.LAZY, mappedBy = "session", targetEntity = Bill::class ) @JsonBackReference var bills: MutableSet&lt;Bill&gt;, )</ID>
    <ID>LongParameterList:Table.kt$Table$( @Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(nullable = false) @field:NotNull(message = "error.table.id.null") var id: Long? = null, @Column(nullable = false) @field:NotNull(message = "error.table.number.null") var number: Int, @field:NotNull(message = "error.table.isAvailable.null") @ColumnDefault("true") var isAvailable: Boolean = true, @Column(nullable = false) @CreatedDate @ColumnDefault(NOW) var createdAt: LocalDateTime = LocalDateTime.now(), @Column(nullable = false) @LastModifiedDate @ColumnDefault(NOW) var updatedAt: LocalDateTime = LocalDateTime.now(), @Column(columnDefinition = "boolean default 0") var deleted: Boolean = false, @ManyToOne(fetch = FetchType.LAZY, optional = false) @JoinColumn(name = "business_id", nullable = false) @OnDelete(action = OnDeleteAction.CASCADE) @JsonManagedReference var business: Business? = null, @OneToMany( cascade = [CascadeType.ALL], fetch = FetchType.LAZY, mappedBy = "table", targetEntity = Session::class ) @JsonBackReference var sessions: MutableSet&lt;Session&gt; = HashSet(), )</ID>
    <ID>SpreadOperator:EntityAlreadyExistsException.kt$EntityAlreadyExistsException$(entityClass, *searchParamsMap)</ID>
    <ID>SpreadOperator:EntityException.kt$EntityException$(*searchParamsMap)</ID>
    <ID>SpreadOperator:EntityNotFoundException.kt$EntityNotFoundException$(entityClass, *searchParamsMap)</ID>
    <ID>SpreadOperator:NymphApplication.kt$(*args)</ID>
    <ID>SwallowedException:KeycloakService.kt$KeycloakService$e: Exception</ID>
    <ID>SwallowedException:UserService.kt$UserService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:KeycloakService.kt$KeycloakService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UserService.kt$UserService$e: Exception</ID>
  </CurrentIssues>
</SmellBaseline>
